syntax = "proto3";
package proto;

    
message ServerState {
    string serverID = 1;
}

enum Op {
    CREATE_PARTITION = 0;
    SHRINK_ISR       = 1;
    REPORT_LEADER    = 2;
    CHANGE_LEADER    = 3;
    EXPAND_ISR       = 4;
}

message RaftLog {
    Op                op                = 1;
    CreatePartitionOp createPartitionOp = 2;
    ShrinkISROp       shrinkISROp       = 3;
    ChangeLeaderOp    changeLeaderOp    = 4;
    ExpandISROp       expandISROp       = 5;
}

message CreatePartitionOp {
    Partition partition = 1;
}

message ShrinkISROp {
    string stream          = 1;
    int32  partition       = 2;
    string replicaToRemove = 3;
    string leader          = 4;
    uint64 leaderEpoch     = 5;
}

message ExpandISROp {
    string stream       = 1;
    int32  partition    = 2;
    string replicaToAdd = 3;
    string leader       = 4;
    uint64 leaderEpoch  = 5;
}

message ReportLeaderOp {
    string stream      = 1;
    int32  partition   = 2;
    string replica     = 3;
    string leader      = 4;
    uint64 leaderEpoch = 5;
}

message ChangeLeaderOp {
    string stream    = 1;
    int32  partition = 2;
    string leader    = 3;
}

message Partition {
    string          subject           = 1;
    string          stream            = 2;
    int32           id                = 3;
    string          group             = 4;
    int32           replicationFactor = 5;
    repeated string replicas          = 6;
    string          leader            = 7;
    repeated string isr               = 8;
    uint64          leaderEpoch       = 9;
    uint64          epoch             = 10;
}

// RaftJoinRequest is a request to join a Raft group.
message RaftJoinRequest {
    string nodeID   = 1; // ID of the joining node.
    string nodeAddr = 2; // Address of the joining node.
}

// RaftJoinResponse is a response to a RaftJoinRequest.
message RaftJoinResponse {
    string error = 1; // Error string, omitted if no error. 
}

message MetadataSnapshot {
    repeated Partition partitions = 1;
}

message ReplicationRequest {
    string replicaID = 1;
    int64  offset    = 2;
}

message LeaderEpochOffsetRequest {
    uint64 leaderEpoch = 1;
}

message LeaderEpochOffsetResponse {
    int64 endOffset = 1;
}

message PropagatedRequest {
    Op                op                = 1;
    CreatePartitionOp createPartitionOp = 2;
    ShrinkISROp       shrinkISROp       = 3;
    ReportLeaderOp    reportLeaderOp    = 4;
    ExpandISROp       expandISROp       = 5;
}

message Error {
    uint32 code = 1;
    string msg  = 2;
}

message PropagatedResponse {
    Op                   op               = 1;
    Error                error            = 2;
    // Reserving = 3 for createPartitionResp if needed.
    // Reserving = 4 for shrinkISRResp if needed.
    // Reserving = 5 for reportLeaderResp if needed.
    // Reserving = 6 for expandISRResp if needed.
}

message ServerInfoRequest {
    string id = 1;
}

message ServerInfoResponse {
    string id   = 1;
    string host = 2;
    int32  port = 3;
}

message PartitionStatusRequest {
    string stream    = 1;
    int32  partition = 2;
}

message PartitionStatusResponse {
    bool exists   = 1;
    bool isLeader = 2;
}

message PartitionNotification {
    string stream    = 1;
    int32  partition = 2;
}
